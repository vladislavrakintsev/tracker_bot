import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from config import BOT_TOKEN
from sheets_manager import SheetsManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
sheets_manager = SheetsManager()

# –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
PORT = int(os.environ.get('PORT', 8000))


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–æ–µ–∫—Ç—ã", callback_data='projects')],
        [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∏", callback_data='tasks')],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data='notes')],
        [InlineKeyboardButton("üîê –°–µ–∫—Ä–µ—Ç—ã", callback_data='secrets')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='create_project')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='select_project_for_task')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        except:
            await update.callback_query.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    else:
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await show_main_menu(update, context)


# –ü—Ä–æ–µ–∫—Ç—ã
async def projects_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    projects = sheets_manager.get_projects()

    if not projects:
        message = "üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!"
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='create_project')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]
    else:
        message = "üìÅ –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
        for project in projects:
            message += f"üîπ {project['ID']}. {project['Name']}\n"
            if project['Description']:
                message += f"   {project['Description']}\n"
            message += "\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = []
        for project in projects[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 10 –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard.append([InlineKeyboardButton(
                f"üìù {project['Name']}",
                callback_data=f'project_tasks_{project["ID"]}'
            )])

        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='create_project')])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –ó–∞–¥–∞—á–∏
async def tasks_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    tasks = sheets_manager.get_tasks()

    if not tasks:
        message = "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='select_project_for_task')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]
    else:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        projects = {}
        for task in tasks:
            project = task['Project']
            if project not in projects:
                projects[project] = []
            projects[project].append(task)

        message = "‚úÖ –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for project, project_tasks in projects.items():
            message += f"üìÅ {project}:\n"
            for task in project_tasks[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
                status_icon = "‚úÖ" if task['Status'] == 'done' else "‚è≥" if task['Status'] == 'in_progress' else "üìù"
                priority_icon = "üî¥" if task['Priority'] == 'high' else "üü°" if task['Priority'] == 'medium' else "üü¢"
                message += f"  {status_icon} {priority_icon} {task['ID']}. {task['Title']}\n"
                if task['Deadline']:
                    message += f"     üìÖ {task['Deadline']}\n"
            message += "\n"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='select_project_for_task')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –ó–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
async def project_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    query = update.callback_query
    project_id = query.data.split('_')[2]

    # –ù–∞–π–¥–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ ID
    projects = sheets_manager.get_projects()
    project_name = None
    for project in projects:
        if str(project['ID']) == project_id:
            project_name = project['Name']
            break

    if not project_name:
        await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    tasks = sheets_manager.get_tasks(project_name)

    if not tasks:
        message = f"üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'"
    else:
        message = f"‚úÖ –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}':\n\n"
        for task in tasks:
            status_icon = "‚úÖ" if task['Status'] == 'done' else "‚è≥" if task['Status'] == 'in_progress' else "üìù"
            priority_icon = "üî¥" if task['Priority'] == 'high' else "üü°" if task['Priority'] == 'medium' else "üü¢"
            message += f"{status_icon} {priority_icon} {task['ID']}. {task['Title']}\n"
            if task['Description']:
                message += f"   {task['Description']}\n"
            if task['Deadline']:
                message += f"   üìÖ {task['Deadline']}\n"
            message += "\n"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f'add_task_to_project_{project_id}')],
        [InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='projects')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.edit_text(message, reply_markup=reply_markup)
    except:
        await query.message.reply_text(message, reply_markup=reply_markup)


# –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def select_project_for_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    projects = sheets_manager.get_projects()

    if not projects:
        message = "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç!"
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='create_project')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]
    else:
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:"
        keyboard = []
        for project in projects:
            keyboard.append([InlineKeyboardButton(
                project['Name'],
                callback_data=f'selected_project_{project["ID"]}'
            )])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ - –≤–≤–æ–¥ –∑–∞–¥–∞—á–∏
async def project_selected_for_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏–º –∑–∞–¥–∞—á—É"""
    query = update.callback_query
    project_id = query.data.split('_')[2]

    # –ù–∞–π–¥–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ ID
    projects = sheets_manager.get_projects()
    project_name = None
    for project in projects:
        if str(project['ID']) == project_id:
            project_name = project['Name']
            break

    if not project_name:
        await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    context.user_data['selected_project'] = project_name

    message = f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    message += "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
    message += "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
    message += "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
    message += "–î–µ–¥–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)"

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.edit_text(message, reply_markup=reply_markup)
    except:
        await query.message.reply_text(message, reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'task_info'


# –ó–∞–º–µ—Ç–∫–∏
async def notes_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"""
    notes = sheets_manager.get_notes()

    if not notes:
        message = "üì≠ –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]
    else:
        message = "üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
        for note in notes[:10]:
            message += f"üìå {note['ID']}. {note['Title']}\n"
            if note['Tags']:
                message += f"   üè∑Ô∏è {note['Tags']}\n"
            message += f"   {note['Content'][:100]}{'...' if len(note['Content']) > 100 else ''}\n"
            message += f"   üìÖ {note['Created']}\n\n"

        if len(notes) > 10:
            message += f"... –∏ –µ—â–µ {len(notes) - 10} –∑–∞–º–µ—Ç–æ–∫\n\n"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –°–µ–∫—Ä–µ—Ç—ã
async def secrets_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    secrets = sheets_manager.get_secrets()

    if not secrets:
        message = "üì≠ –ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç", callback_data='add_secret')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]
    else:
        message = "üîê –í–∞—à–∏ —Å–µ–∫—Ä–µ—Ç—ã:\n\n"
        for secret in secrets[:5]:
            message += f"üîí {secret['ID']}. {secret['Name']}\n"
            if secret['Description']:
                message += f"   {secret['Description']}\n"
            message += f"   üìÖ {secret['Created']}\n\n"

        if len(secrets) > 5:
            message += f"... –∏ –µ—â–µ {len(secrets) - 5} —Å–µ–∫—Ä–µ—Ç–æ–≤\n\n"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç", callback_data='add_secret')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
async def create_project_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É):\n"
    message += "–ü—Ä–∏–º–µ—Ä:\n"
    message += "–ú–æ–π –ø—Ä–æ–µ–∫—Ç\n"
    message += "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

    context.user_data['waiting_for'] = 'project_info'


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def add_note_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    message = "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    message += "–ó–∞–≥–æ–ª–æ–≤–æ–∫\n"
    message += "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
    message += "–¢–µ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
    message += "–ü—Ä–æ–µ–∫—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

    context.user_data['waiting_for'] = 'note_info'


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞
async def add_secret_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞"""
    message = "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    message += "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
    message += "–û–ø–∏—Å–∞–Ω–∏–µ\n"
    message += "–î–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ —Ç.–¥.)"

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        except:
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

    context.user_data['waiting_for'] = 'secret_info'


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'waiting_for' not in context.user_data:
        return

    text = update.message.text

    if context.user_data['waiting_for'] == 'project_info':
        lines = text.split('\n')
        name = lines[0]
        description = lines[1] if len(lines) > 1 else ""

        project_id = sheets_manager.add_project(name, description)
        if project_id:
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{name}' —Å–æ–∑–¥–∞–Ω! ID: {project_id}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")

        context.user_data.pop('waiting_for', None)
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

    elif context.user_data['waiting_for'] == 'task_info':
        lines = text.split('\n')
        if len(lines) < 1:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞")
            return

        project = context.user_data.get('selected_project', '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞')
        title = lines[0]
        description = lines[1] if len(lines) > 1 else ""
        priority = lines[2] if len(lines) > 2 else "medium"
        deadline = lines[3] if len(lines) > 3 else ""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if priority not in ['high', 'medium', 'low']:
            priority = 'medium'

        task_id = sheets_manager.add_task(project, title, description, priority, deadline)
        if task_id:
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞! ID: {task_id}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")

        context.user_data.pop('waiting_for', None)
        context.user_data.pop('selected_project', None)
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

    elif context.user_data['waiting_for'] == 'note_info':
        lines = text.split('\n')
        if len(lines) < 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏")
            return

        title = lines[0]
        content = lines[1]
        tags = lines[2] if len(lines) > 2 else ""
        project = lines[3] if len(lines) > 3 else ""

        note_id = sheets_manager.add_note(title, content, tags, project)
        if note_id:
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞! ID: {note_id}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")

        context.user_data.pop('waiting_for', None)
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

    elif context.user_data['waiting_for'] == 'secret_info':
        lines = text.split('\n')
        if len(lines) < 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏")
            return

        name = lines[0]
        description = lines[1]
        data = lines[2] if len(lines) > 2 else ""

        secret_id = sheets_manager.add_secret(name, description, data)
        if secret_id:
            await update.message.reply_text(f"‚úÖ –°–µ–∫—Ä–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID: {secret_id}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞")

        context.user_data.pop('waiting_for', None)
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == 'main_menu':
        await show_main_menu(update, context)

    elif query.data == 'projects':
        await projects_list(update, context)

    elif query.data == 'tasks':
        await tasks_list(update, context)

    elif query.data == 'notes':
        await notes_list(update, context)

    elif query.data == 'secrets':
        await secrets_list(update, context)

    elif query.data == 'create_project':
        await create_project_start(update, context)

    elif query.data == 'select_project_for_task':
        await select_project_for_task(update, context)

    elif query.data.startswith('selected_project_'):
        await project_selected_for_task(update, context)

    elif query.data.startswith('project_tasks_'):
        await project_tasks(update, context)

    elif query.data.startswith('add_task_to_project_'):
        project_id = query.data.split('_')[4]
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
        await select_project_for_task(update, context)

    elif query.data == 'add_note':
        await add_note_start(update, context)

    elif query.data == 'add_secret':
        await add_secret_start(update, context)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ TaskBot...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("projects", projects_list))
    application.add_handler(CommandHandler("tasks", tasks_list))
    application.add_handler(CommandHandler("notes", notes_list))

    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if os.environ.get('RENDER') is None:
        application.run_polling()
    else:

        # –î–ª—è Render - webhook
        WEBHOOK_URL = f"https://–≤–∞—à_–¥–æ–º–µ–Ω_–Ω–∞_Render.com/webhook"
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
        )


if __name__ == '__main__':
    main()
